<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member">

    <resultMap id="memberWithAuthoritiesResultMap" type="com.spring.ion.lcw.dto.MemberDTO">
        <id property="userId" column="userId" />
        <result property="password" column="password" />
        <result property="nickname" column="nickname" />
        <result property="gender" column="gender" />
        <result property="enabled" column="enabled" />
        <result property="created_at" column="created_at" />
        <result property="banUntil" column="ban_until" />
        <result property="infoUntil" column="info_until" />
        <result property="provider" column="provider" />
        <result property="city" column="city" />
        <result property="district" column="district" />
        <collection property="authorities" ofType="java.lang.String">
            <result column="authority" />
        </collection>
    </resultMap>

    <insert id="insertMember" parameterType="com.spring.ion.lcw.dto.MemberDTO">
        INSERT INTO member (
        userId, password, nickname, gender, enabled, created_at, provider, city, district
        ) VALUES (
        #{userId}, #{password}, #{nickname}, #{gender}, #{enabled}, NOW(), #{provider}, #{city}, #{district}
        )
    </insert>

    <insert id="insertMemberAuthority" parameterType="com.spring.ion.lcw.dto.MemberDTO">
        INSERT INTO member_authority (
        userId, authority
        ) VALUES (
        #{userId}, 'ROLE_MEMBER'
        )
    </insert>



    <delete id="deleteMember" parameterType="String">
        DELETE
        FROM member
        WHERE userId = #{userId}
    </delete>

    <delete id="deleteMemberAuthorities" parameterType="String">
        DELETE
        FROM member_authority
        WHERE userId = #{userId}
    </delete>

    <select id="findByUserId" parameterType="String" resultType="com.spring.ion.lcw.dto.MemberDTO">
        SELECT *
        FROM member
        WHERE userId = #{userId}
    </select>

    <select id="findByUserIdWithAuthorities" parameterType="String" resultMap="memberWithAuthoritiesResultMap">
        SELECT m.userId, m.provider, m.password, m.nickname, m.gender, m.enabled, m.created_at, m.ban_until, m.info_until, ma.authority, m.city, m.district
        FROM member m
        LEFT JOIN member_authority ma ON m.userId = ma.userId
        WHERE m.userId = #{userId}
    </select>

    <update id="updateMember" parameterType="com.spring.ion.lcw.dto.MemberDTO">
        UPDATE member
        <set>
            <if test="password != null and !password.isEmpty()">
                password = #{password},
            </if>
            <if test="nickname != null and !nickname.isEmpty()">
                nickname = #{nickname},
            </if>
            city = #{city},
            district = #{district},
            info_until = #{infoUntil}
        </set>
        WHERE userId = #{userId}
    </update>

    <update id="updateNaverMember" parameterType="com.spring.ion.lcw.dto.MemberDTO">
        UPDATE member
        <set>
            <if test="nickname != null and !nickname.isEmpty()">
                nickname = #{nickname},
            </if>
            city = #{city},
            district = #{district},
            info_until = #{infoUntil}
        </set>
        WHERE userId = #{userId}
    </update>

    <update id="unban" parameterType="com.spring.ion.lcw.dto.MemberDTO">
        UPDATE member
        SET enabled = #{enabled}, ban_until = null
        WHERE userId = #{userId}
    </update>

    <update id="updateNicknameUntil" parameterType="com.spring.ion.lcw.dto.MemberDTO">
        UPDATE member
        SET nickname_until = #{nicknameUntil}
        WHERE userId = #{userId}
    </update>

    <update id="updateProfileImg">
        UPDATE member
        SET profile_img = #{profileImg}
        WHERE userId = #{userId}
    </update>


    <select id="findByRegionExceptWriter" parameterType="map" resultType="com.spring.ion.lcw.dto.MemberDTO">
        SELECT *
        FROM member
        WHERE city = #{city}
        AND district = #{district}
        AND nickname != #{writerNickname}
    </select>

    <!-- 재학 증명서 관련 yjw-->
    <update id="markVerified" parameterType="string">
        UPDATE member
        SET enrollment_verified = 1
        WHERE userId = #{userId}
    </update>


</mapper>


<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Flag">

    <insert id="write" parameterType="FlagPost" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO flag_post (title, nickname, content, userId, city, district, status)
        VALUES (#{title}, #{nickname}, #{content}, #{userId}, #{city}, #{district},
        COALESCE(#{status}, 'PENDING'))
    </insert>

    <select id="findAll" resultType="FlagPost">
        SELECT * FROM flag_post ORDER BY id DESC
    </select>

    <select id="findById" parameterType="long" resultType="FlagPost">
        SELECT * FROM flag_post WHERE id = #{id}
    </select>

    <update id="update" parameterType="FlagPost">
        UPDATE flag_post
        SET title = #{title}, content = #{content}, status = 'PENDING'
        WHERE id = #{id}
    </update>

    <delete id="delete" parameterType="long">
        DELETE FROM flag_post WHERE id = #{id}
    </delete>

    <select id="pagingList" parameterType="java.util.HashMap" resultType="FlagPost">
        SELECT * FROM flag_post ORDER BY id DESC LIMIT #{start}, #{limit}
    </select>

    <select id="flagCount" resultType="int">
        SELECT COUNT(id) FROM flag_post
    </select>

    <select id="search" parameterType="string" resultType="com.spring.ion.yjw.dto.FlagPostDTO">
        SELECT * FROM flag_post
        WHERE title LIKE CONCAT('%', #{value}, '%')
        OR content LIKE CONCAT('%', #{value}, '%')
        ORDER BY id DESC
    </select>

    <update id="increaseViewCount" parameterType="int">
        UPDATE flag_post
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

    <select id="hasLiked" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM flag_like
        WHERE post_id = #{postId} AND member_id = #{memberId}
    </select>

    <insert id="insertLike">
        INSERT INTO flag_like (post_id, member_id)
        VALUES (#{postId}, #{memberId})
    </insert>

    <update id="increaseLikeCount">
        UPDATE flag_post
        SET like_count = like_count + 1
        WHERE id = #{postId}
    </update>

    <insert id="saveFile" parameterType="com.spring.ion.yjw.dto.FlagFileDTO">
        INSERT INTO flag_file (board_id, originalFileName, storedFileName)
        VALUES (#{board_id}, #{originalFileName}, #{storedFileName})
    </insert>

    <select id="findFilesByBoardId" resultType="com.spring.ion.yjw.dto.FlagFileDTO">
        SELECT * FROM flag_file WHERE board_id = #{board_id}
    </select>

    <delete id="deleteFileById" parameterType="long">
        DELETE FROM flag_file WHERE id = #{fileId}
    </delete>

    <update id="updateLikeCount" parameterType="long">
        UPDATE flag_post
        SET like_count = (SELECT COUNT(*) FROM flag_like WHERE post_id = #{postId})
        WHERE id = #{postId}
    </update>

    <select id="findAllByWriter" parameterType="string" resultType="FlagPost">
        SELECT * FROM flag_post WHERE userId = #{value} ORDER BY created_at DESC
    </select>

    <insert id="insertFlagPost" parameterType="FlagPost">
        INSERT INTO flag_post
        (nickname, title, content, like_count, view_count, created_at, userId, city, district)
        VALUES
        (#{nickname}, #{title}, #{content}, #{likeCount}, #{viewCount}, #{createdAt}, #{userId}, #{city}, #{district})
    </insert>

    <select id="findAllApproved" resultType="FlagPost">
        SELECT * FROM flag_post
        WHERE status = 'APPROVED'
        ORDER BY id DESC
    </select>

    <select id="findAllForUser" parameterType="map" resultType="FlagPost">
        SELECT *
        FROM flag_post
        WHERE status = 'APPROVED' OR userId = #{userId}
        ORDER BY created_at DESC
    </select>

    <select id="findAllPending" resultType="FlagPost">
        SELECT * FROM flag_post WHERE status = 'PENDING' ORDER BY created_at ASC
    </select>

    <update id="updateStatus" parameterType="map">
        UPDATE flag_post
        SET status = #{status}
        WHERE id = #{id}
    </update>

    <select id="pagingListPublicOrMine" parameterType="map" resultType="FlagPost">
        SELECT p.*
        FROM flag_post p
        WHERE p.status = 'APPROVED' OR p.userId = #{userId}
        ORDER BY
        CASE WHEN EXISTS (
        SELECT 1 FROM member_authority ma
        WHERE ma.userId = p.userId
        AND ma.authority = 'ROLE_ADMIN'
        ) THEN 0 ELSE 1 END,
        p.id DESC
        LIMIT #{start}, #{limit}
    </select>


    <select id="flagCountPublicOrMine" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM flag_post
        WHERE status = 'APPROVED' OR userId = #{value}
    </select>

    <select id="searchPublicOrMine" parameterType="map" resultType="FlagPost">
        SELECT *
        FROM flag_post
        WHERE (status = 'APPROVED' OR userId = #{userId})
        AND (title   LIKE CONCAT('%', #{keyword}, '%')
        OR content LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY id DESC
    </select>

    <select id="findAllPosts" resultType="FlagPost">
        SELECT
        f.id,
        f.title,
        f.content,
        f.view_count,
        f.like_count,
        f.status,
        f.nickname,
        m.profileImg
        FROM flag_post f
        LEFT JOIN member m ON f.nickname = m.nickname
        ORDER BY f.id DESC
    </select>


</mapper>
